# Generated by Django 5.2.7 on 2025-10-11 22:07

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="FavoriteShop",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Personal notes about this shop",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
            ],
            options={
                "verbose_name": "Favorite Shop",
                "verbose_name_plural": "Favorite Shops",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LoyaltyToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("earned", "Earned from Purchase"),
                            ("spent", "Spent on Order"),
                            ("expired", "Expired"),
                            ("admin_adjustment", "Admin Adjustment"),
                        ],
                        max_length=20,
                        verbose_name="Transaction Type",
                    ),
                ),
                (
                    "amount",
                    models.IntegerField(
                        help_text="Positive for earned, negative for spent",
                        verbose_name="Token Amount",
                    ),
                ),
                (
                    "balance_after",
                    models.IntegerField(
                        default=0, verbose_name="Balance After Transaction"
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Description"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
            ],
            options={
                "verbose_name": "Loyalty Token Transaction",
                "verbose_name_plural": "Loyalty Token Transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomerProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Phone Number"
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date of Birth"
                    ),
                ),
                (
                    "street_address",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Street Address"
                    ),
                ),
                (
                    "city",
                    models.CharField(blank=True, max_length=100, verbose_name="City"),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True, max_length=10, verbose_name="Postal Code"
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        default="DE", max_length=2, verbose_name="Country Code"
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Current location for local search",
                        max_digits=9,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ],
                        verbose_name="Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Current location for local search",
                        max_digits=9,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ],
                        verbose_name="Longitude",
                    ),
                ),
                (
                    "default_search_radius_km",
                    models.PositiveIntegerField(
                        default=150,
                        help_text="Preferred radius for local shop search",
                        validators=[django.core.validators.MaxValueValidator(500)],
                        verbose_name="Default Search Radius (km)",
                    ),
                ),
                (
                    "newsletter_subscribed",
                    models.BooleanField(
                        default=False, verbose_name="Newsletter Subscription"
                    ),
                ),
                (
                    "marketing_consent",
                    models.BooleanField(
                        default=False, verbose_name="Marketing Consent"
                    ),
                ),
                (
                    "total_orders",
                    models.PositiveIntegerField(default=0, verbose_name="Total Orders"),
                ),
                (
                    "total_spent",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=10,
                        verbose_name="Total Spent (â‚¬)",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="customer_profile",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Customer Profile",
                "verbose_name_plural": "Customer Profiles",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DigitalReceipt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "receipt_number",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Receipt Number"
                    ),
                ),
                (
                    "receipt_type",
                    models.CharField(
                        choices=[
                            ("online", "Online Order"),
                            ("in_store", "In-Store Purchase"),
                        ],
                        default="online",
                        max_length=20,
                        verbose_name="Receipt Type",
                    ),
                ),
                (
                    "expense_type",
                    models.CharField(
                        choices=[("personal", "Personal"), ("business", "Business")],
                        default="personal",
                        help_text="For tax categorization",
                        max_length=20,
                        verbose_name="Expense Type",
                    ),
                ),
                ("purchase_date", models.DateTimeField(verbose_name="Purchase Date")),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Total Amount (â‚¬)"
                    ),
                ),
                (
                    "tax_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=10,
                        verbose_name="Tax Amount (â‚¬)",
                    ),
                ),
                (
                    "return_deadline",
                    models.DateField(
                        blank=True,
                        help_text="Last date for returns",
                        null=True,
                        verbose_name="Return Deadline",
                    ),
                ),
                (
                    "is_returnable",
                    models.BooleanField(default=True, verbose_name="Returnable"),
                ),
                (
                    "pdf_file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="receipts/%Y/%m/",
                        verbose_name="PDF Receipt",
                    ),
                ),
                (
                    "is_archived",
                    models.BooleanField(
                        default=False,
                        help_text="Archive after return deadline expires",
                        verbose_name="Archived",
                    ),
                ),
                (
                    "exported_to_datev",
                    models.BooleanField(
                        default=False, verbose_name="Exported to DATEV"
                    ),
                ),
                (
                    "datev_export_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="DATEV Export Date"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="receipts",
                        to="customers.customerprofile",
                        verbose_name="Customer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Digital Receipt",
                "verbose_name_plural": "Digital Receipts",
                "ordering": ["-purchase_date"],
            },
        ),
    ]
